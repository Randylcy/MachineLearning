
# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('Social_Network_Ads.csv')
X = dataset.iloc[:,[2,3]].values   #.values 代表只取值，不包含dataFrame里的格式信息。
y = dataset.iloc[:, 4].values
     # X为矩阵，y为向量

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

# Feature Scaling   #做的是逻辑回归，y的值应该保留0、1的形式，因而不需要做特征缩放。
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)


# Fitting classifier to the Training set
# from sklearn.linear_model import LogisticRegression
# classifier = LogisticRegression(random_state = 0)
# classifier.fit(X_train, y_train)
from sklearn.svm import SVC
classifier = SVC(kernel= 'linear',random_state= 0)   #需要对核kernel设置参数， 得到和 教程一样的结果，必须对random_state 赋值
classifier.fit(X_train, y_train)

#Predicting the Test set results
y_pred = classifier.predict(X_test)

#Making the Confusion Matrix
from  sklearn.metrics import  confusion_matrix   #导入混淆矩阵,可以用来查看测试集中预测错误的个数
cm = confusion_matrix(y_test, y_pred)


#Visualling the Training set results
from matplotlib.colors import ListedColormap   #这个类可以给不同的点上不同的颜色
X_set, y_set = X_train, y_train
X1, X2 =  np.meshgrid(np.arange(start =  X_set[:,0].min() - 1, stop = X_set[:,0].max() +1, step = 0.01),    #左边的-1和+1是为了图像有留白
                    np.arange(start =  X_set[:,1].min() - 1, stop = X_set[:,1].max() +1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(),X2.ravel()]).T).reshape(X1.shape),
             alpha =  0.75, cmap = ListedColormap(('red','green')))       #给分类的结果涂色， 0的话为红色，1的话为绿色
plt.xlim(X1.min(),X1.max())
plt.ylim(X2.min(),X2.max())
#上面是为了标注最大值和最小值
for i,j in enumerate(np.unique(y_set)):     #画出实际观测的点
    # plt.scatter(X_set[y_set == j,0],X_set[y_set == j,1],
    # c= ListedColormap(('red','green'))(i),label= j)
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
    c= ListedColormap(('orange','blue'))(i),label= j)    #给结果涂色， 0的话为橘黄色，1的话为蓝色
plt.title('Classifier (Training set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()   #生成标签，显示不同点对应的值
plt.show()


#Visualling the Test set results
from matplotlib.colors import ListedColormap
X_set, y_set = X_test, y_test
X1, X2 =  np.meshgrid(np.arange(start =  X_set[:,0].min() - 1, stop = X_set[:,0].max() +1, step = 0.01),
                    np.arange(start =  X_set[:,1].min() - 1, stop = X_set[:,1].max() +1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(),X2.ravel()]).T).reshape(X1.shape),
             alpha =  0.75, cmap = ListedColormap(('red','green')))
plt.xlim(X1.min(),X1.max())
plt.ylim(X2.min(),X2.max())
for i,j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
    c= ListedColormap(('orange','blue'))(i),label= j)
plt.title('Classifier (Test set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()

#预测边界，即分类边界
#from sklearn.linear_model import LogisticRegression， 从线性分类器中选择的逻辑回归，对于非线性的点并不能完全的分开